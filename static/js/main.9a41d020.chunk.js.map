{"version":3,"sources":["constantValues.js","reducers/service.jsx","reducers/provider.jsx","reducers/allReducers.jsx","components/navBar.jsx","components/common/listGroup.jsx","components/common/table.jsx","services/httpService.js","components/providers.jsx","actions/provider.jsx","components/service.jsx","actions/service.jsx","App.js","serviceWorker.js","index.js"],"names":["constantValues","initState","list","selectedItem","service","state","action","type","dummyValue","id","attributes","name","payload","provider","allReducers","combineReducers","NavBar","className","to","Component","ListGroup","onItemSelect","items","textProperty","valueProperty","console","log","map","item","index","onClick","key","style","cursor","_","get","defaultProps","Table","createKey","column","categoryId","path","handleChange","input","currentTarget","props","onChange","value","renderCell","imageLoad","toString","this","columns","data","length","rowspan","colSpan","textAlign","axios","defaults","baseURL","interceptors","response","use","error","status","toast","warning","Promise","reject","post","put","delete","mapActionToProps","getProviders","dispatch","http","then","connect","ownProps","providers","history","location","useEffect","label","src","alt","class","width","getServices","setServices","services","selectedService","store","createStore","compose","applyMiddleware","thunk","App","component","Service","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9a41d020.chunk.js","sourcesContent":["export const constantValues = {\r\n    FETCHSERVICES: \"FETCH_SERVICES\",\r\n    SETSERVICE: \"SET_SERVICE\",\r\n    FETCHPROVIDERS: \"FETCH_PROVIDERS\"\r\n}","import { constantValues } from \"../constantValues\";\r\nconst initState = {\r\n    list: [],\r\n    selectedItem: {},\r\n};\r\n\r\nconst service = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case constantValues.FETCHSERVICES:\r\n            const dummyValue = { id: \"_all\", attributes: { name: \"All\" } };\r\n            return {\r\n                ...state,\r\n                list: [dummyValue, ...action.payload],\r\n                selectedItem: dummyValue,\r\n            };\r\n        case constantValues.SETSERVICE:\r\n            return {\r\n                ...state,\r\n                selectedItem: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default service;\r\n","import { constantValues } from \"../constantValues\";\r\nconst initState = {\r\n    list: [],\r\n    selectedItem: {},\r\n};\r\n\r\nconst provider = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case constantValues.FETCHPROVIDERS:\r\n            return {\r\n                ...state,\r\n                list: [...action.payload],\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default provider;\r\n","import { combineReducers } from \"redux\";\r\nimport service from \"./service\";\r\nimport provider from \"./provider\";\r\n\r\n\r\nconst allReducers = combineReducers({\r\n    service, provider\r\n});\r\nexport default allReducers;\r\n","import React, { Component } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\n\r\nclass NavBar extends Component {\r\n\r\n    state = {};\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                <Link className=\"navbar-brand\" to=\"/\">\r\n                    Home assignment\r\n        </Link>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <NavLink className=\"nav-link\" to=\"/service\">\r\n                                Service\r\n              </NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport _ from \"lodash\";\r\nconst ListGroup = ({\r\n    onItemSelect,\r\n    items,\r\n    selectedItem,\r\n    textProperty,\r\n    valueProperty,\r\n}) => {\r\n    console.log(textProperty)\r\n    return (\r\n        <ul className=\"list-group\">\r\n            {items.map((item, index) => (\r\n                <li\r\n                    onClick={() => onItemSelect(item)}\r\n                    className={\r\n                        item === selectedItem ? \"list-group-item active\" : \"list-group-item\"\r\n                    }\r\n                    // key={typeof item === \"object\" ? item[valueProperty] : item}\r\n                    key={index}\r\n                    style={{ cursor: \"pointer\" }}\r\n                >\r\n                    {typeof item === \"object\" ? _.get(item, textProperty) : item}\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nListGroup.defaultProps = {\r\n    textProperty: \"name\",\r\n    valueProperty: \"_id\",\r\n};\r\nexport default ListGroup;\r\n","import React, { Component } from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nclass Table extends Component {\r\n    createKey = (item, column) => {\r\n        return item.categoryId + (column.path || column.key);\r\n    };\r\n    handleChange = ({ currentTarget: input }) => {\r\n        this.props.onChange(input.id, input.value);\r\n    };\r\n    renderCell = (item, column) => {\r\n        if (column.imageLoad) {\r\n            return column.imageLoad(item);\r\n        }\r\n        const value = _.get(item, column.path);\r\n        return value ? value.toString() : \"\";\r\n    };\r\n    render() {\r\n        const { columns, data } = this.props;\r\n\r\n        return (\r\n            <table className=\"table\">\r\n                <tbody>\r\n                    {data.length > 0 ? (\r\n                        data.map((item, index) => (\r\n                            <tr key={index}>\r\n                                <td>\r\n                                    <table><tr><td rowspan=\"2\">{this.renderCell(item, columns[0])}</td>\r\n                                        <td>{this.renderCell(item, columns[1])}</td></tr><tr><td>{this.renderCell(item, columns[2])}</td></tr></table>\r\n                                </td>\r\n                            </tr>\r\n                        ))\r\n                    ) : (\r\n                            <tr>\r\n                                <td colSpan={columns.length} style={{ textAlign: \"center\" }}>\r\n                                    No data found\r\n              </td>\r\n                            </tr>\r\n                        )}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Table;\r\n","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\n//axios.defaults.baseURL = \"http://localhost:5000/api/\";\r\n//axios.defaults.baseURL = \"http://localhost:52724/api/\";\r\naxios.defaults.baseURL = \"https://api.inquickerstaging.com/v3/winter.inquickerstaging.com/\";\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n    console.log(\"Logging the error:\", error);\r\n    const expectedError =\r\n        error.response &&\r\n        error.response.status >= 400 &&\r\n        error.response.status < 500;\r\n    if (expectedError) {\r\n        if (error && error.response) {\r\n            switch (error.response.status) {\r\n                case 401:\r\n                    toast.warning(\"Authentication error\");\r\n                    break;\r\n                case 400:\r\n                    toast.warning(\"Invalid username/password\");\r\n                    break;\r\n\r\n                default: {\r\n                    toast.error(\"Unexpected error\" + error.response.status);\r\n                }\r\n            }\r\n        }\r\n    } else toast.error(error.toString());\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default {\r\n    get: axios.get,\r\n    post: axios.post,\r\n    put: axios.put,\r\n    delete: axios.delete,\r\n\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport Table from \"./common/table\";\r\n\r\nimport * as actions from \"../actions/provider\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nconst Providers = ({ ...props }) => {\r\n    const { providers, getProviders } = props;\r\n\r\n    useEffect(() => {\r\n        getProviders();\r\n    }, [getProviders]);\r\n\r\n\r\n    const columns = [\r\n        {\r\n            path: \"attributes.card-image\",\r\n            label: \"Card Image\",\r\n\r\n            imageLoad: (provider) => (\r\n                <img src={provider.attributes['card-image'] ? provider.attributes['card-image'] : \"https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg\"} alt={provider.attributes.name} class=\"img-responsive\" width=\"130px\" />\r\n            )\r\n        }, {\r\n            path: \"attributes.name\",\r\n            label: \"Name\",\r\n\r\n        }, {\r\n            path: \"attributes.subspecialties\",\r\n            label: \"Subspecialties\",\r\n\r\n        },];\r\n    return (\r\n        <div className=\"col-6\">\r\n            <Table columns={columns} data={providers} />\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    providers: state.provider.list,\r\n    service: ownProps.service,\r\n    history: ownProps.history,\r\n    location: ownProps.location,\r\n});\r\nconst mapActionToProps = {\r\n    getProviders: actions.fetchProviders,\r\n\r\n\r\n};\r\nexport default connect(mapStateToProps, mapActionToProps)(Providers);","import http from \"../services/httpService\";\r\nimport { constantValues } from \"../constantValues\";\r\n\r\nexport const fetchProviders = () => (dispatch) => {\r\n    http.get(\"providers\").then((response) => {\r\n        dispatch({\r\n            type: constantValues.FETCHPROVIDERS,\r\n            payload: response.data.data,\r\n        });\r\n    });\r\n    //.catch((err) => console.log(err));\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ListGroup from \"./common/listGroup\";\r\nimport { connect } from \"react-redux\";\r\nimport Providers from \"./providers\";\r\nimport * as actions from \"../actions/service\";\r\n\r\n\r\nconst Service = ({ ...props }) => {\r\n    const { services, selectedService, getServices } = props;\r\n\r\n    useEffect(() => {\r\n        getServices();\r\n    }, [getServices]);\r\n\r\n    const handleSelect = (service) => {\r\n        props.setServices(service);\r\n    };\r\n    return (\r\n        <div className=\"row\">\r\n            <div>\r\n                <ListGroup\r\n                    items={services}\r\n                    textProperty=\"attributes.name\"\r\n                    valueProperty=\"id\"\r\n                    onItemSelect={handleSelect}\r\n                    selectedItem={selectedService}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Providers service={selectedService} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    services: state.service.list,\r\n    selectedService: state.service.selectedItem,\r\n    history: ownProps.history,\r\n    location: ownProps.location,\r\n});\r\nconst mapActionToProps = {\r\n    getServices: actions.fetchServices,\r\n    setServices: actions.setService\r\n\r\n};\r\nexport default connect(mapStateToProps, mapActionToProps)(Service);\r\n","import http from \"../services/httpService\";\r\nimport { constantValues } from \"../constantValues\";\r\n\r\nexport const fetchServices = () => (dispatch) => {\r\n    http.get(\"services\").then((response) => {\r\n        dispatch({\r\n            type: constantValues.FETCHSERVICES,\r\n            payload: response.data.data,\r\n        });\r\n    });\r\n    //.catch((err) => console.log(err));\r\n};\r\n\r\nexport const setService = (service) => (dispatch) => {\r\n\r\n    dispatch({\r\n        type: constantValues.SETSERVICE,\r\n        payload: service,\r\n    });\r\n};","import React from 'react';\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\n\nimport allReducers from \"./reducers/allReducers\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport './App.css';\nimport { ToastContainer } from 'react-toastify';\nimport NavBar from \"./components/navBar\";\nimport Service from \"./components/service\";\n\nconst store = createStore(\n  allReducers,\n  compose(\n    applyMiddleware(thunk)\n  )\n);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <ToastContainer />\n        <NavBar />\n        <Switch>\n          <Route path=\"/service\" component={Service} />\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister(); \n"],"sourceRoot":""}